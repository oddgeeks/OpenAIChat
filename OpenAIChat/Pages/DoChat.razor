@page "/do-chat"
@using JiuLing.CommonLibs.ExtensionMethods;
@using Microsoft.Extensions.Options
@using OpenAI.GPT3.Managers;
@using OpenAI.GPT3;
@using OpenAI.GPT3.ObjectModels.RequestModels;
@using OpenAI.GPT3.ObjectModels;
@using OpenAIChat.Models;

@inject IOptions<AppSettings> MyAppSettings;
<PageTitle>Chat</PageTitle>
<div class="container">
    <div class="body">
        @{
            foreach (var history in _histories)
            {
                <div class="question-item">
                    <div class="speech-content">@history.Question</div>
                    @if (history.Answer.IsEmpty())
                    {
                        <div class="loading">
                            <span></span>
                            <span></span>
                            <span></span>
                            <span></span>
                            <span></span>
                        </div>
                    }
                    else
                    {
                        <div>
                            @(new MarkupString(history.Answer.Replace("\n", "<br />")))
                        </div>
                    }
                </div>
            }
        }
    </div>
    <div class="footer">
        <input class="search-input" placeholder="想聊点什么呢？" @bind="_searchKey" @onkeyup="KeyUp" />
        <input class="search-button" type="button" value="提问" @onclick="BeginChat" />
    </div>
</div>

@code {

    private bool _isLoading;
    private string _searchKey = "";
    private List<QuestionAndAnswer> _histories = null!;
    OpenAIService _service = null!;
    CompletionCreateRequest _createRequest = null!;

    protected override Task OnInitializedAsync()
    {
        _histories = new List<QuestionAndAnswer>();
        _service = new OpenAIService(new OpenAiOptions() { ApiKey = MyAppSettings.Value.OpenAIApiKey ?? throw new ArgumentNullException() });
        _createRequest = new CompletionCreateRequest()
            {

                Temperature = 0,
                MaxTokens = 1000
            };

        return base.OnInitializedAsync();
    }


    private void KeyUp(KeyboardEventArgs args)
    {
        if (args.Key != "Enter")
        {
            return;
        }
        InvokeAsync(RequestOpenAI);
    }

    private async void BeginChat()
    {
        await RequestOpenAI();
    }

    private async Task RequestOpenAI()
    {
        if (_searchKey.IsEmpty())
        {
            return;
        }
        if (_isLoading)
        {
            return;
        }
        _isLoading = true;

        string question = $"Question:{_searchKey}";
        string answer = "";
        _searchKey = "";

        string context = string.Join(" ", _histories.Select(x => $"{x.Question}\n{x.Answer}\n"));
        _histories.Add(new QuestionAndAnswer(question, answer));
        StateHasChanged();
        try
        {
            string prompt = $"{context}{question}";
            if (prompt.Length >= MyAppSettings.Value.ContextMaxLength)
            {
                answer = "语境有点长了，请刷新页面后重新玩耍~~~~";
                return;
            }
            _createRequest.Prompt = $"{context}{question}";

            var res = await _service.Completions.CreateCompletion(_createRequest, Models.TextDavinciV3);

            if (res.Successful)
            {
                answer = res.Choices.First().Text;
                answer = answer.Trim('\n');
            }
            else
            {
                answer = "对方似乎没搞懂你想干啥....";
            }
        }
        catch (Exception ex)
        {
            answer = $"崩了，崩了，{ex.Message}，{ex.StackTrace}";
        }
        finally
        {
            _histories.First(x => x.Question == question).Answer = answer;
            _isLoading = false;
            StateHasChanged();
        }
    }
}
